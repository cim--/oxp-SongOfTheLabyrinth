uniform float uTime;
uniform float uDuration;
uniform sampler2D uDiffuse;

varying vec2 vTexCoord;

void main() {

	float x = vTexCoord.x - 0.5;
	float y = vTexCoord.y - 0.5;
	
	vec4 diffuseColor = texture2D(uDiffuse,vTexCoord.xy);

	diffuseColor.r *= 1.0+(sin(0.3*uTime-2.0)/2.5);
	diffuseColor.g *= 1.0+(sin(uTime));
	diffuseColor.b *= 1.0+(sin(2.5*uTime+2.0)/3.5);
	
	float intensity = 1.0;
	float dist2 = (x*x)+(y*y); // 0 at centre, 0.5 at corner

	if (uTime < 10.0) {
		float darkening = (uTime/10.0)*(1-dist2);
		diffuseColor.r *= darkening*darkening;
		diffuseColor.g *= darkening*darkening;
		diffuseColor.b *= darkening;
		intensity = darkening;
	} else if (uTime > uDuration - 10.0) {
		intensity = (uDuration - uTime)/10.0;
		float lightening = (1.0-intensity)*1.5; // 0..1.5
		if (dist2 < lightening) {
			float brighten = lightening-dist2;
			diffuseColor.r += brighten;
			diffuseColor.g += brighten;
			diffuseColor.b += brighten;
		}
	} 
		
	float dist = sqrt(1/(dist2+0.0001));
	float pulse = sin((dist*3.0)+((5.0+(2.5*uTime/uDuration))*uTime));
	if (pulse > 0.8) {
		pulse = 1.0+((pulse - 0.8)*intensity*intensity*intensity);
		if (diffuseColor.r < pulse) {
			diffuseColor.r *= pulse;
		}
		if (diffuseColor.g < pulse) {
			diffuseColor.g *= pulse;
		}
		if (diffuseColor.b < pulse) {
			diffuseColor.b *= pulse;
		}

	}	

	gl_FragColor = diffuseColor;

}
